#! /usr/bin/env python

from random import choice, randrange
from time import sleep
from sys import stderr
from copy import deepcopy
import curses


class World(object):
    def __init__(self, x, y):
        self._a = [[self._populate() for i in xrange(x)] for i in xrange(y)]
        self._x = x
        self._y = y
        self._c = 0

    def clear(self):
        self._a = [[self._populate() for i in xrange(self._x)] for i in xrange(self._y)]

    def for_each_cell(self, f):
        for x, line in enumerate(self._a, start=1):
            for y, cell in enumerate(line, start=1):
                f(y, x, cell)


class ZebraWorld(World):
    def _populate(self):
        return choice(['z', 'L'] + [' '] * 64)

    def _move(self, x, y):
        xmove = choice([-1, 0, 1]) + x
        if xmove < self._x and xmove >= 0:
            x = xmove
        ymove = choice([-1, 0, 1]) + y
        if ymove < self._y and ymove >= 0:
            y = ymove
        return x, y

    def update(self):
        b = [[True for i in xrange(self._x)] for i in xrange(self._y)]
        for iy, y in enumerate(self._a):
            for ix, x in enumerate(y):
                nix, niy = self._move(ix, iy)
                if not b[niy][nix] or iy == niy and ix == nix:
                    continue
                if x != ' ' and self._a[niy][nix] == ' ':
                    self._a[niy][nix] = x
                    self._a[iy][ix] = ' '
                    b[niy][nix] = False
                elif x == 'z' and self._a[niy][nix] == 'L':
                    self._a[niy][nix] = 'Z'
                    self._a[iy][ix] = ' '
                    b[niy][nix] = False
                elif x == 'L' and self._a[niy][nix] == 'z':
                    self._a[iy][ix] = ' '
                    self._a[niy][nix] = 'Z'
                    b[niy][nix] = False
                elif x == 'Z' and self._a[niy][nix] == 'z':
                    self._a[iy][ix] = choice(['Z', ' ', ' ', 'z', 'z'])
                    self._a[niy][nix] = 'Z'
                    b[niy][nix] = False
                elif x == 'z' and self._a[niy][nix] == 'Z':
                    self._a[iy][ix] = choice(['Z', ' ', ' ', 'z', 'z'])
                    self._a[niy][nix] = 'Z'
                    b[niy][nix] = False
                elif x == 'Z' and self._a[niy][nix] == 'Z':
                    self._a[iy][ix] = choice(['Z', ' ', ' ', ' ', 'z'])
                    self._a[niy][nix] = 'Z'
                    b[niy][nix] = False
                elif x == 'z' and self._a[niy][nix] == 'z':
                    oix, oiy = self._move(nix, niy)
                    if self._a[oiy][oix] == ' ':
                        self._a[oiy][oix] = choice(['z', 'z', 'z', 'z', 'z', 'z', ' '])
                        b[oiy][oix] = False
                elif x == 'L' and self._a[niy][nix] == 'L':
                    self._a[iy][ix] = choice(['L', 'L', 'L', ' '])
                    oix, oiy = self._move(nix, niy)
                    if self._a[oiy][oix] == ' ':
                        self._a[oiy][oix] = choice(['L', 'L', 'L', ' '])
                        b[oiy][oix] = False
                if randrange(15) == 0:
                    self._a[iy][ix] = ' '

    def __str__(self):
        return "Zebra's world"


class GameOfLife(World):
    def _populate(self):
        return choice(['X'] * 8 + [' '] * 32)

    def _count_neighbours(self, ax, ay, b):
        neighbours = 0
        for xd, yd in [(1, 1), (1, 0), (1, -1), (0, 1), (0, -1), (-1, 1), (-1, 0), (-1, -1)]:
            tx, ty = ax + xd, ay + yd
            if b[self._y + ty if ty < 0 else ty % self._y][self._x + tx if tx < 0 else tx % self._x] == 'X':
                neighbours += 1
        return neighbours

    def _rule(self, x, y, n):
        if n < 2 or n > 3:
            self._a[y][x] = ' '
        elif n == 3:
            self._a[y][x] = 'X'

    def update(self):
        b = deepcopy(self._a)
        for iy, y in enumerate(b):
            for ix, x in enumerate(y):
                self._rule(ix, iy, self._count_neighbours(ix, iy, b))

    def __str__(self):
        return "Game of Life"


class LifeWithoutDeath(GameOfLife):
    def _populate(self):
        return choice(['X'] + [' '] * 32)

    def _rule(self, x, y, n):
        if n == 3:
            self._a[y][x] = 'X'

    def __str__(self):
        return "Life without Death"


def main():
    worlds = [ZebraWorld, GameOfLife, LifeWithoutDeath]
    index = 0

    try:
        def draw_border(w, xsize, world):
            w.border()
            w.addstr(0, 2, str(world))
            w.addstr(xsize-1, 2, "(q)uit (r)efresh (s)witch")

        w = curses.initscr()

        curses.start_color()
        curses.init_pair(1, curses.COLOR_GREEN, curses.COLOR_BLACK)
        curses.init_pair(2, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)
        curses.init_pair(4, curses.COLOR_WHITE, curses.COLOR_BLACK)
        curses.noecho()
        curses.curs_set(False)

        w.nodelay(True)
        w.keypad(True)

        wx, wy = w.getmaxyx()

        z1 = worlds[index](wx-2, wy-2)

        draw_border(w, wx, z1)
        w.refresh()

        colors = {'z': 1, 'L': 2, 'Z': 3, ' ': 4, 'X': 1}

        q = w.getch()

        while q != ord('q'):
            sleep(0.1)
            z1.for_each_cell(lambda a, b, c: w.addstr(a, b, c, curses.color_pair(colors[c])))
            z1.update()
            w.refresh()
            q = w.getch()
            if q == ord('r'):
                z1.clear()
            if q == ord('s'):
                index = (index + 1) % len(worlds)
                xx, yy = w.getmaxyx()
                z1 = worlds[index](xx-2, yy-2)
                draw_border(w, xx, z1)
            elif q == curses.KEY_RESIZE:
                xx, yy = w.getmaxyx()
                z1 = worlds[index](xx-2, yy-2)
                draw_border(w, xx, z1)

    finally:
        curses.endwin()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        stderr.write("\nControl-C.  Let's call it quits.\n")
